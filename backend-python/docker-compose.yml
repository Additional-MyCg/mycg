version: '3.8'

services:
  mycg-ai:
    build: 
      context: .
      dockerfile: Dockerfile
    image: mycg-ai:latest
    container_name: mycg-ai-service
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379
      - NODE_BACKEND_URL=http://node-backend:3000
    env_file:
      - .env
    volumes:
      - ./temp_uploads:/app/temp_uploads
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mycg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
  redis:
    image: redis:7-alpine
    container_name: mycg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - mycg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  nginx:
    image: nginx:alpine
    container_name: mycg-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - mycg-ai
    restart: unless-stopped
    networks:
      - mycg-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus & Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: mycg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mycg-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: mycg-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mycg-network
    profiles:
      - monitoring

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mycg-network:
    driver: bridge